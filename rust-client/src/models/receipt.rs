/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.33
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Receipt {
    /// Receipt id
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<i32>>,
    /// Receipt date
    #[serde(rename = "date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date: Option<Option<String>>,
    /// Receipt number
    #[serde(rename = "number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub number: Option<Option<f64>>,
    /// Receipt numeration
    #[serde(rename = "numeration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub numeration: Option<Option<String>>,
    /// Receipt total net amount
    #[serde(rename = "amount_net", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_net: Option<Option<f64>>,
    /// Receipt total vat amount
    #[serde(rename = "amount_vat", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_vat: Option<Option<f64>>,
    /// Receipt total gross amount
    #[serde(rename = "amount_gross", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_gross: Option<Option<f64>>,
    /// Receipt uses gross prices
    #[serde(rename = "use_gross_prices", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub use_gross_prices: Option<Option<bool>>,
    /// Receipt type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Receipt description
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// Receipt revenue center
    #[serde(rename = "rc_center", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rc_center: Option<Option<String>>,
    /// Receipt creation date
    #[serde(rename = "created_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<Option<String>>,
    /// Receipt last update date
    #[serde(rename = "updated_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Option<String>>,
    #[serde(rename = "payment_account", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_account: Option<Option<Box<models::PaymentAccount>>>,
    #[serde(rename = "items_list", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub items_list: Option<Option<Vec<models::ReceiptItemsListItem>>>,
}

impl Receipt {
    pub fn new() -> Receipt {
        Receipt {
            id: None,
            date: None,
            number: None,
            numeration: None,
            amount_net: None,
            amount_vat: None,
            amount_gross: None,
            use_gross_prices: None,
            r#type: None,
            description: None,
            rc_center: None,
            created_at: None,
            updated_at: None,
            payment_account: None,
            items_list: None,
        }
    }
}
/// Receipt type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "till_receipt")]
    TillReceipt,
    #[serde(rename = "sales_receipt")]
    SalesReceipt,
}

impl Default for Type {
    fn default() -> Type {
        Self::TillReceipt
    }
}

