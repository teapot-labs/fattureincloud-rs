/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Email {
    /// Email id
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<i32>>,
    /// Email status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Email sent date
    #[serde(rename = "sent_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sent_date: Option<Option<String>>,
    /// Email errors count
    #[serde(rename = "errors_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub errors_count: Option<Option<i32>>,
    /// Email errors log
    #[serde(rename = "error_log", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error_log: Option<Option<String>>,
    /// Email sender email
    #[serde(rename = "from_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from_email: Option<Option<String>>,
    /// Email sender name
    #[serde(rename = "from_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from_name: Option<Option<String>>,
    /// Email recipient email
    #[serde(rename = "to_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to_email: Option<Option<String>>,
    /// Email receipient name
    #[serde(rename = "to_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to_name: Option<Option<String>>,
    /// Email subject
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<String>>,
    /// Email content
    #[serde(rename = "content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub content: Option<Option<String>>,
    /// Email cc
    #[serde(rename = "copy_to", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub copy_to: Option<Option<String>>,
    /// Email recipient status
    #[serde(rename = "recipient_status", skip_serializing_if = "Option::is_none")]
    pub recipient_status: Option<RecipientStatus>,
    /// Email recipient date
    #[serde(rename = "recipient_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recipient_date: Option<Option<String>>,
    /// Email kind
    #[serde(rename = "kind", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub kind: Option<Option<String>>,
    /// Email attachments
    #[serde(rename = "attachments", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Option<Vec<models::EmailAttachment>>>,
}

impl Email {
    pub fn new() -> Email {
        Email {
            id: None,
            status: None,
            sent_date: None,
            errors_count: None,
            error_log: None,
            from_email: None,
            from_name: None,
            to_email: None,
            to_name: None,
            subject: None,
            content: None,
            copy_to: None,
            recipient_status: None,
            recipient_date: None,
            kind: None,
            attachments: None,
        }
    }
}
/// Email status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "sending")]
    Sending,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "sent")]
    Sent,
}

impl Default for Status {
    fn default() -> Status {
        Self::Sending
    }
}
/// Email recipient status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RecipientStatus {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "document_opened")]
    DocumentOpened,
    #[serde(rename = "email_opened")]
    EmailOpened,
}

impl Default for RecipientStatus {
    fn default() -> RecipientStatus {
        Self::Unknown
    }
}

