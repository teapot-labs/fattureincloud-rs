/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Supplier {
    /// Supplier id
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<i32>>,
    /// Supplier code
    #[serde(rename = "code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub code: Option<Option<String>>,
    /// Supplier name
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Supplier type
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<Type>>,
    /// Supplier first name
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<String>>,
    /// Supplier last name
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<String>>,
    /// Supplier contact person
    #[serde(rename = "contact_person", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub contact_person: Option<Option<String>>,
    /// Supplier vat number
    #[serde(rename = "vat_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vat_number: Option<Option<String>>,
    /// Supplier tax code
    #[serde(rename = "tax_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tax_code: Option<Option<String>>,
    /// Supplier street address
    #[serde(rename = "address_street", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_street: Option<Option<String>>,
    /// Supplier postal code
    #[serde(rename = "address_postal_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_postal_code: Option<Option<String>>,
    /// Supplier city
    #[serde(rename = "address_city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_city: Option<Option<String>>,
    /// Supplier province
    #[serde(rename = "address_province", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_province: Option<Option<String>>,
    /// Supplier address extra info
    #[serde(rename = "address_extra", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_extra: Option<Option<String>>,
    /// Supplier country
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<String>>,
    /// Supplier country iso code
    #[serde(rename = "country_iso", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country_iso: Option<Option<String>>,
    /// Supplier email
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    /// Supplier certified email
    #[serde(rename = "certified_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub certified_email: Option<Option<String>>,
    /// Supplier phone
    #[serde(rename = "phone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone: Option<Option<String>>,
    /// Supplier fax
    #[serde(rename = "fax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fax: Option<Option<String>>,
    /// Supplier extra notes
    #[serde(rename = "notes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub notes: Option<Option<String>>,
    /// Supplier bank IBAN
    #[serde(rename = "bank_iban", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bank_iban: Option<Option<String>>,
    /// Supplier creation date
    #[serde(rename = "created_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<Option<String>>,
    /// Supplier last update date
    #[serde(rename = "updated_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Option<String>>,
}

impl Supplier {
    pub fn new() -> Supplier {
        Supplier {
            id: None,
            code: None,
            name: None,
            r#type: None,
            first_name: None,
            last_name: None,
            contact_person: None,
            vat_number: None,
            tax_code: None,
            address_street: None,
            address_postal_code: None,
            address_city: None,
            address_province: None,
            address_extra: None,
            country: None,
            country_iso: None,
            email: None,
            certified_email: None,
            phone: None,
            fax: None,
            notes: None,
            bank_iban: None,
            created_at: None,
            updated_at: None,
        }
    }
}
/// Supplier type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "person")]
    Person,
    #[serde(rename = "pa")]
    Pa,
    #[serde(rename = "condo")]
    Condo,
}

impl Default for Type {
    fn default() -> Type {
        Self::Company
    }
}

