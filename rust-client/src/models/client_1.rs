/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.33
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Client1 {
    /// Client id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Client code
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Client name
    #[serde(rename = "name")]
    pub name: String,
    /// Client type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Client first name
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// Client last name
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// Client contact person
    #[serde(rename = "contact_person", skip_serializing_if = "Option::is_none")]
    pub contact_person: Option<String>,
    /// Client vat number
    #[serde(rename = "vat_number", skip_serializing_if = "Option::is_none")]
    pub vat_number: Option<String>,
    /// Client tax code
    #[serde(rename = "tax_code", skip_serializing_if = "Option::is_none")]
    pub tax_code: Option<String>,
    /// Client address street
    #[serde(rename = "address_street", skip_serializing_if = "Option::is_none")]
    pub address_street: Option<String>,
    /// Client address postal code
    #[serde(rename = "address_postal_code", skip_serializing_if = "Option::is_none")]
    pub address_postal_code: Option<String>,
    /// Client address city
    #[serde(rename = "address_city", skip_serializing_if = "Option::is_none")]
    pub address_city: Option<String>,
    /// Client address province
    #[serde(rename = "address_province", skip_serializing_if = "Option::is_none")]
    pub address_province: Option<String>,
    /// Client address extra info
    #[serde(rename = "address_extra", skip_serializing_if = "Option::is_none")]
    pub address_extra: Option<String>,
    /// Client country
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Client country iso code
    #[serde(rename = "country_iso", skip_serializing_if = "Option::is_none")]
    pub country_iso: Option<String>,
    /// Client email
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Client certified email
    #[serde(rename = "certified_email", skip_serializing_if = "Option::is_none")]
    pub certified_email: Option<String>,
    /// Client phone
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    /// Client fax
    #[serde(rename = "fax", skip_serializing_if = "Option::is_none")]
    pub fax: Option<String>,
    /// Client extra
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "default_vat", skip_serializing_if = "Option::is_none")]
    pub default_vat: Option<Box<models::VatType1>>,
    /// Client default payment terms
    #[serde(rename = "default_payment_terms", skip_serializing_if = "Option::is_none")]
    pub default_payment_terms: Option<i32>,
    /// Payment terms type
    #[serde(rename = "default_payment_terms_type", skip_serializing_if = "Option::is_none")]
    pub default_payment_terms_type: Option<DefaultPaymentTermsType>,
    #[serde(rename = "default_payment_method", skip_serializing_if = "Option::is_none")]
    pub default_payment_method: Option<Box<models::PaymentMethod1>>,
    /// Client bank name
    #[serde(rename = "bank_name", skip_serializing_if = "Option::is_none")]
    pub bank_name: Option<String>,
    /// Client bank iban
    #[serde(rename = "bank_iban", skip_serializing_if = "Option::is_none")]
    pub bank_iban: Option<String>,
    /// Client bank swift code
    #[serde(rename = "bank_swift_code", skip_serializing_if = "Option::is_none")]
    pub bank_swift_code: Option<String>,
    /// Client shipping address
    #[serde(rename = "shipping_address", skip_serializing_if = "Option::is_none")]
    pub shipping_address: Option<String>,
    /// Use e-invoices for this entity
    #[serde(rename = "e_invoice", skip_serializing_if = "Option::is_none")]
    pub e_invoice: Option<bool>,
    /// Client e-invoice code 
    #[serde(rename = "ei_code", skip_serializing_if = "Option::is_none")]
    pub ei_code: Option<String>,
    /// Highlight Discount
    #[serde(rename = "discount_highlight", skip_serializing_if = "Option::is_none")]
    pub discount_highlight: Option<bool>,
    /// Client default discount
    #[serde(rename = "default_discount", skip_serializing_if = "Option::is_none")]
    pub default_discount: Option<f64>,
    /// Client has intent declaration
    #[serde(rename = "has_intent_declaration", skip_serializing_if = "Option::is_none")]
    pub has_intent_declaration: Option<bool>,
    /// Client intent declaration protocol number
    #[serde(rename = "intent_declaration_protocol_number", skip_serializing_if = "Option::is_none")]
    pub intent_declaration_protocol_number: Option<String>,
    /// Client intent declaration protocol date
    #[serde(rename = "intent_declaration_protocol_date", skip_serializing_if = "Option::is_none")]
    pub intent_declaration_protocol_date: Option<String>,
    /// Client creation date
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Client last update date
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl Client1 {
    pub fn new(name: String) -> Client1 {
        Client1 {
            id: None,
            code: None,
            name,
            r#type: None,
            first_name: None,
            last_name: None,
            contact_person: None,
            vat_number: None,
            tax_code: None,
            address_street: None,
            address_postal_code: None,
            address_city: None,
            address_province: None,
            address_extra: None,
            country: None,
            country_iso: None,
            email: None,
            certified_email: None,
            phone: None,
            fax: None,
            notes: None,
            default_vat: None,
            default_payment_terms: None,
            default_payment_terms_type: None,
            default_payment_method: None,
            bank_name: None,
            bank_iban: None,
            bank_swift_code: None,
            shipping_address: None,
            e_invoice: None,
            ei_code: None,
            discount_highlight: None,
            default_discount: None,
            has_intent_declaration: None,
            intent_declaration_protocol_number: None,
            intent_declaration_protocol_date: None,
            created_at: None,
            updated_at: None,
        }
    }
}
/// Client type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "person")]
    Person,
    #[serde(rename = "pa")]
    Pa,
    #[serde(rename = "condo")]
    Condo,
}

impl Default for Type {
    fn default() -> Type {
        Self::Company
    }
}
/// Payment terms type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultPaymentTermsType {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "end_of_month")]
    EndOfMonth,
}

impl Default for DefaultPaymentTermsType {
    fn default() -> DefaultPaymentTermsType {
        Self::Standard
    }
}

