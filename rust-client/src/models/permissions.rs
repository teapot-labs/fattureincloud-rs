/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Permissions : 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Permissions {
    /// Permission level
    #[serde(rename = "fic_situation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_situation: Option<Option<FicSituation>>,
    /// Permission level
    #[serde(rename = "fic_clients", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_clients: Option<Option<FicClients>>,
    /// Permission level
    #[serde(rename = "fic_suppliers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_suppliers: Option<Option<FicSuppliers>>,
    /// Permission level
    #[serde(rename = "fic_products", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_products: Option<Option<FicProducts>>,
    /// Permission level
    #[serde(rename = "fic_issued_documents", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_issued_documents: Option<Option<FicIssuedDocuments>>,
    /// Permission level
    #[serde(rename = "fic_received_documents", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_received_documents: Option<Option<FicReceivedDocuments>>,
    /// Permission level
    #[serde(rename = "fic_receipts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_receipts: Option<Option<FicReceipts>>,
    /// Permission level
    #[serde(rename = "fic_calendar", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_calendar: Option<Option<FicCalendar>>,
    /// Permission level
    #[serde(rename = "fic_archive", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_archive: Option<Option<FicArchive>>,
    /// Permission level
    #[serde(rename = "fic_taxes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_taxes: Option<Option<FicTaxes>>,
    /// Permission level
    #[serde(rename = "fic_stock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_stock: Option<Option<FicStock>>,
    /// Permission level
    #[serde(rename = "fic_cashbook", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_cashbook: Option<Option<FicCashbook>>,
    /// Permission level
    #[serde(rename = "fic_settings", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_settings: Option<Option<FicSettings>>,
    /// Permission level
    #[serde(rename = "fic_emails", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_emails: Option<Option<FicEmails>>,
    /// Permission level
    #[serde(rename = "fic_export", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_export: Option<Option<FicExport>>,
    /// Permission level
    #[serde(rename = "fic_import_bankstatements", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_import_bankstatements: Option<Option<FicImportBankstatements>>,
    /// Permission level
    #[serde(rename = "fic_import_clients_suppliers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_import_clients_suppliers: Option<Option<FicImportClientsSuppliers>>,
    /// Permission level
    #[serde(rename = "fic_import_issued_documents", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_import_issued_documents: Option<Option<FicImportIssuedDocuments>>,
    /// Permission level
    #[serde(rename = "fic_import_products", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_import_products: Option<Option<FicImportProducts>>,
    /// Permission level
    #[serde(rename = "fic_recurring", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_recurring: Option<Option<FicRecurring>>,
    /// Permission level
    #[serde(rename = "fic_riba", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_riba: Option<Option<FicRiba>>,
    /// Permission level
    #[serde(rename = "dic_employees", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dic_employees: Option<Option<DicEmployees>>,
    /// Permission level
    #[serde(rename = "dic_settings", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dic_settings: Option<Option<DicSettings>>,
    /// Permission level
    #[serde(rename = "dic_timesheet", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dic_timesheet: Option<Option<DicTimesheet>>,
    #[serde(rename = "fic_issued_documents_detailed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fic_issued_documents_detailed: Option<Option<Box<models::PermissionsFicIssuedDocumentsDetailed>>>,
}

impl Permissions {
    /// 
    pub fn new() -> Permissions {
        Permissions {
            fic_situation: None,
            fic_clients: None,
            fic_suppliers: None,
            fic_products: None,
            fic_issued_documents: None,
            fic_received_documents: None,
            fic_receipts: None,
            fic_calendar: None,
            fic_archive: None,
            fic_taxes: None,
            fic_stock: None,
            fic_cashbook: None,
            fic_settings: None,
            fic_emails: None,
            fic_export: None,
            fic_import_bankstatements: None,
            fic_import_clients_suppliers: None,
            fic_import_issued_documents: None,
            fic_import_products: None,
            fic_recurring: None,
            fic_riba: None,
            dic_employees: None,
            dic_settings: None,
            dic_timesheet: None,
            fic_issued_documents_detailed: None,
        }
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicSituation {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicSituation {
    fn default() -> FicSituation {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicClients {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicClients {
    fn default() -> FicClients {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicSuppliers {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicSuppliers {
    fn default() -> FicSuppliers {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicProducts {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicProducts {
    fn default() -> FicProducts {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicIssuedDocuments {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicIssuedDocuments {
    fn default() -> FicIssuedDocuments {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicReceivedDocuments {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicReceivedDocuments {
    fn default() -> FicReceivedDocuments {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicReceipts {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicReceipts {
    fn default() -> FicReceipts {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicCalendar {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicCalendar {
    fn default() -> FicCalendar {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicArchive {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicArchive {
    fn default() -> FicArchive {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicTaxes {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicTaxes {
    fn default() -> FicTaxes {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicStock {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicStock {
    fn default() -> FicStock {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicCashbook {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicCashbook {
    fn default() -> FicCashbook {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicSettings {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicSettings {
    fn default() -> FicSettings {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicEmails {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicEmails {
    fn default() -> FicEmails {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicExport {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicExport {
    fn default() -> FicExport {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicImportBankstatements {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicImportBankstatements {
    fn default() -> FicImportBankstatements {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicImportClientsSuppliers {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicImportClientsSuppliers {
    fn default() -> FicImportClientsSuppliers {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicImportIssuedDocuments {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicImportIssuedDocuments {
    fn default() -> FicImportIssuedDocuments {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicImportProducts {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicImportProducts {
    fn default() -> FicImportProducts {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicRecurring {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicRecurring {
    fn default() -> FicRecurring {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FicRiba {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for FicRiba {
    fn default() -> FicRiba {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DicEmployees {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for DicEmployees {
    fn default() -> DicEmployees {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DicSettings {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for DicSettings {
    fn default() -> DicSettings {
        Self::None
    }
}
/// Permission level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DicTimesheet {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "detailed")]
    Detailed,
}

impl Default for DicTimesheet {
    fn default() -> DicTimesheet {
        Self::None
    }
}

