/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct F241 {
    /// F24 id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// F24 due date
    #[serde(rename = "due_date")]
    pub due_date: String,
    /// F24 status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "payment_account", skip_serializing_if = "Option::is_none")]
    pub payment_account: Option<Box<models::PaymentAccount1>>,
    /// F24 amount
    #[serde(rename = "amount")]
    pub amount: f64,
    /// [Temporary] [Read Only] F24 url of the attached file
    #[serde(rename = "attachment_url", skip_serializing_if = "Option::is_none")]
    pub attachment_url: Option<String>,
    /// [Write Only]  F24 attachment token returned by POST /taxes/attachment
    #[serde(rename = "attachment_token", skip_serializing_if = "Option::is_none")]
    pub attachment_token: Option<String>,
    /// F24 description
    #[serde(rename = "description")]
    pub description: String,
}

impl F241 {
    pub fn new(due_date: String, amount: f64, description: String) -> F241 {
        F241 {
            id: None,
            due_date,
            status: None,
            payment_account: None,
            amount,
            attachment_url: None,
            attachment_token: None,
            description,
        }
    }
}
/// F24 status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "not_paid")]
    NotPaid,
    #[serde(rename = "reversed")]
    Reversed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Paid
    }
}

