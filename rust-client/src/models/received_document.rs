/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReceivedDocument {
    /// Received document id
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<i32>>,
    /// Received document type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "entity", skip_serializing_if = "Option::is_none")]
    pub entity: Option<Box<models::Entity>>,
    /// Received document date [defaults to today's date]
    #[serde(rename = "date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date: Option<Option<String>>,
    /// Received document category
    #[serde(rename = "category", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub category: Option<Option<String>>,
    /// Received document description
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// Received document total net amount
    #[serde(rename = "amount_net", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_net: Option<Option<f64>>,
    /// Received document total vat amount
    #[serde(rename = "amount_vat", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_vat: Option<Option<f64>>,
    /// Received document withholding tax amount
    #[serde(rename = "amount_withholding_tax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_withholding_tax: Option<Option<f64>>,
    /// Received document other withholding tax amount
    #[serde(rename = "amount_other_withholding_tax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_other_withholding_tax: Option<Option<f64>>,
    /// [Read Only] Received document total gross amount
    #[serde(rename = "amount_gross", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_gross: Option<Option<f64>>,
    /// Received document amortization value
    #[serde(rename = "amortization", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amortization: Option<Option<f64>>,
    /// Received document revenue center
    #[serde(rename = "rc_center", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rc_center: Option<Option<String>>,
    /// Received document invoice number
    #[serde(rename = "invoice_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub invoice_number: Option<Option<String>>,
    /// Received document is marked
    #[serde(rename = "is_marked", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_marked: Option<Option<bool>>,
    /// Received document has items
    #[serde(rename = "is_detailed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_detailed: Option<Option<bool>>,
    /// [Read Only] Received document is an e-invoice
    #[serde(rename = "e_invoice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub e_invoice: Option<Option<bool>>,
    /// [Read Only] Received document date of the next not paid payment
    #[serde(rename = "next_due_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_due_date: Option<Option<String>>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Box<models::Currency>>,
    /// Received document tax deducibility percentage
    #[serde(rename = "tax_deductibility", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tax_deductibility: Option<Option<f64>>,
    /// Received document vat deducibility percentage
    #[serde(rename = "vat_deductibility", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vat_deductibility: Option<Option<f64>>,
    #[serde(rename = "items_list", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub items_list: Option<Option<Vec<models::ReceivedDocumentItemsListItem>>>,
    #[serde(rename = "payments_list", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payments_list: Option<Option<Vec<models::ReceivedDocumentPaymentsListItem>>>,
    /// [Temporary] [Read Only] Received document url of the attached file
    #[serde(rename = "attachment_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attachment_url: Option<Option<String>>,
    /// [Temporary] [Read Only] Received document url of the attachment preview
    #[serde(rename = "attachment_preview_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attachment_preview_url: Option<Option<String>>,
    /// Received document total items amount and total payments amount can differ if this field is set to false
    #[serde(rename = "auto_calculate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub auto_calculate: Option<Option<bool>>,
    /// [Write Only] Received document attachment token returned by POST /received_documents/attachment
    #[serde(rename = "attachment_token", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attachment_token: Option<Option<String>>,
    /// Received Document can't be edited
    #[serde(rename = "locked", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub locked: Option<Option<bool>>,
    /// Received document creation date
    #[serde(rename = "created_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<Option<String>>,
    /// Received document last update date
    #[serde(rename = "updated_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Option<String>>,
}

impl ReceivedDocument {
    pub fn new() -> ReceivedDocument {
        ReceivedDocument {
            id: None,
            r#type: None,
            entity: None,
            date: None,
            category: None,
            description: None,
            amount_net: None,
            amount_vat: None,
            amount_withholding_tax: None,
            amount_other_withholding_tax: None,
            amount_gross: None,
            amortization: None,
            rc_center: None,
            invoice_number: None,
            is_marked: None,
            is_detailed: None,
            e_invoice: None,
            next_due_date: None,
            currency: None,
            tax_deductibility: None,
            vat_deductibility: None,
            items_list: None,
            payments_list: None,
            attachment_url: None,
            attachment_preview_url: None,
            auto_calculate: None,
            attachment_token: None,
            locked: None,
            created_at: None,
            updated_at: None,
        }
    }
}
/// Received document type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "expense")]
    Expense,
    #[serde(rename = "passive_credit_note")]
    PassiveCreditNote,
    #[serde(rename = "passive_delivery_note")]
    PassiveDeliveryNote,
}

impl Default for Type {
    fn default() -> Type {
        Self::Expense
    }
}

